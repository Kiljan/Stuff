# Variables from library
# GENERATED_TOKEN_NAME  == somesecret
# POSTGRES_PASSWORD     == somesecret
# POSTGRES_USER         == somesecret
# projectKey 	          == testKey
# projectName           == Test_Project
# qualityGate           == Custom_Gate
# repoUrl               == repo link
# SONAR_ADMIN_PASSWORD  == somesecret
# SONARQUBE_URL         == http://localhost:9000

trigger:
- master

pool:
  name: Default

variables:
  - group: SonarQubeSetUp

jobs:
- job: InstallDependencies
  displayName: 'Install Dependencies'
  steps:
    - script: |
        echo "Installing dependencies..."
        curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
        sudo apt update
        sudo apt install -y openjdk-17-jdk unzip tmux vim nodejs jq

- job: InstallDocker
  displayName: 'Install & Configure Docker'
  dependsOn: InstallDependencies
  steps:
    - script: |  
        if command -v docker &> /dev/null; then
          echo "Docker is already installed. Skipping installation."
        else
          echo "Install Docker"
          sudo apt install docker.io   
          
          echo "Adding current user to Docker group..."
          sudo usermod -aG docker $(whoami)
        
          echo "Restarting Docker service..."
          sudo systemctl restart docker
        fi

- job: DeployPostgresForSonarQube
  displayName: 'Deploy Postgres for SonarQube'
  dependsOn: InstallDocker
  steps:
    - script: |
        if [ "$(docker ps -a -q -f name=postgres-db)" ]; then
          echo "‚úÖ Container 'postgres-db' already exists. Skipping creation."
        else
          docker run -d --restart=always --name postgres-db \
          -e POSTGRES_USER=$(POSTGRES_USER) \
          -e POSTGRES_PASSWORD=$(POSTGRES_PASSWORD) \
          -e POSTGRES_DB=sonar \
          postgres:15

          echo "Waiting for Postgres to start..."
          sleep 30
        fi

- job: DeploySonarQube
  displayName: 'Deploy SonarQube in Docker'
  dependsOn: DeployPostgresForSonarQube
  steps:
    - script: |
        if [ "$(docker ps -a -q -f name=sonarqube)" ]; then
          echo "‚úÖ Container 'sonarqube' already exists. Skipping creation."
        else
          echo "Starting SonarQube..."
          docker run -d --restart=always --name sonarqube \
            -p 9000:9000 \
            -e SONARQUBE_JDBC_URL="jdbc:postgresql://postgres-db/sonar" \
            -e SONARQUBE_JDBC_USERNAME=$(POSTGRES_USER) \
            -e SONARQUBE_JDBC_PASSWORD=$(POSTGRES_PASSWORD) \
            sonarqube:lts-community

          echo "Waiting for SonarQube to become available..."
          sleep 240
        fi

- job: SonarScanner
  displayName: 'SonarQube Analysis'
  dependsOn: DeploySonarQube
  variables:
    scannerVersion: '5.0.1.3006'
    scannerDir: 'sonar-scanner-$(scannerVersion)-linux'
    scannerZip: 'sonar-scanner-cli-$(scannerVersion)-linux.zip'
  steps:
    - script: |
        echo "üîê Changing admin password..."
        curl -s -u admin:admin -X POST "$(SONARQUBE_URL)/api/users/change_password" \
          -d "login=admin" \
          -d "previousPassword=admin" \
          -d "password=$(SONAR_ADMIN_PASSWORD)"

        echo "üîç Checking if token '$(GENERATED_TOKEN_NAME)' already exists..."
        EXISTING_TOKENS=$(curl -s -u admin:$(SONAR_ADMIN_PASSWORD) "$(SONARQUBE_URL)/api/user_tokens/search")
        TOKEN_EXISTS=$(echo "$EXISTING_TOKENS" | jq -r '.userTokens[].name' | grep -Fx "$(GENERATED_TOKEN_NAME)")

        if [ -n "$TOKEN_EXISTS" ]; then
          echo "üóëÔ∏è Token already exists. Deleting old token..."
          curl -s -u admin:$(SONAR_ADMIN_PASSWORD) \
            -X POST "$(SONARQUBE_URL)/api/user_tokens/revoke" \
            -d name="$(GENERATED_TOKEN_NAME)"
        fi

        echo "üîë Creating token '$(GENERATED_TOKEN_NAME)'..."
        RESPONSE=$(curl -s -u admin:$(SONAR_ADMIN_PASSWORD) \
          -X POST "$(SONARQUBE_URL)/api/user_tokens/generate" \
          -d name="$(GENERATED_TOKEN_NAME)")

        SONAR_TOKEN=$(echo "$RESPONSE" | jq -r '.token')

        if [ -z "$SONAR_TOKEN" ] || [ "$SONAR_TOKEN" == "null" ]; then
          echo "‚ùå Token generation failed"
          echo "Response: $RESPONSE"
          exit 1
        fi

        echo "‚úÖ Token created"
        echo "##vso[task.setvariable variable=SONAR_TOKEN;issecret=true]$SONAR_TOKEN"
      displayName: 'Generate Sonar Token'

    - script: |
        echo "üìä Checking if quality gate '${qualityGate}' exists..."

        GATE_ID=$(curl -s -u admin:${SONAR_ADMIN_PASSWORD} \
          "${SONARQUBE_URL}/api/qualitygates/list" \
          | jq -r ".qualitygates[] | select(.name==\"${qualityGate}\") | .id")

        if [ -z "$GATE_ID" ]; then
          echo "üöß Quality gate not found. Creating..."
          curl -s -u admin:${SONAR_ADMIN_PASSWORD} \
            -X POST \
            -d "name=${qualityGate}" \
            "${SONARQUBE_URL}/api/qualitygates/create"

          echo "‚ûï Adding minimal condition (ncloc >= 1)..."
          curl -s -u admin:${SONAR_ADMIN_PASSWORD} \
            -X POST \
            -d "gateName=${qualityGate}" \
            -d "metric=ncloc" \
            -d "op=LT" \
            -d "error=1" \
            "${SONARQUBE_URL}/api/qualitygates/create_condition"
        else
          echo "‚úÖ Quality gate '${qualityGate}' already exists. Skipping creation."
        fi

        echo "üìå Assigning '${qualityGate}' to project '${projectKey}'..."
        curl -s -u admin:${SONAR_ADMIN_PASSWORD} \
          -X POST \
          -d "projectKey=${projectKey}" \
          -d "gateName=${qualityGate}" \
          "${SONARQUBE_URL}/api/qualitygates/select"
      displayName: 'Set up Quality Gate'


    - script: |
        echo "‚¨áÔ∏è Downloading SonarQube Scanner..."
        wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/$(scannerZip)
        unzip -q $(scannerZip)

        echo "‚öôÔ∏è Creating config..."
        echo "sonar.host.url=$(SONARQUBE_URL)" > sonar-scanner.properties
        echo "sonar.login=$(SONAR_TOKEN)" >> sonar-scanner.properties
        echo "sonar.projectKey=$(projectKey)" >> sonar-scanner.properties
        echo "sonar.projectName=$(projectName)" >> sonar-scanner.properties
        echo "sonar.sources=." >> sonar-scanner.properties
        echo "sonar.scm.provider=git" >> sonar-scanner.properties
        echo "sonar.git.repositoryUrl=$(repoUrl)" >> sonar-scanner.properties

        echo "üöÄ Running scanner..."
        ./$(scannerDir)/bin/sonar-scanner -D project.settings=sonar-scanner.properties
        
        echo "‚è≥ Waiting for SonarQube analysis to finish..."
        sleep 10
      displayName: 'Scan via SonarQube Scanner'

    - script: |
        echo "üìä Checking Quality Gate status..."
        STATUS="Waiting"
        echo "üìã Status = $STATUS"

        for i in {1..30}; do
          RESPONSE=$(curl -s -u admin:$SONAR_ADMIN_PASSWORD "$SONARQUBE_URL/api/qualitygates/project_status?projectKey=$projectKey")
          STATUS=$(echo "$RESPONSE" | jq -r '.projectStatus.status')
          
          if [ "$STATUS" == "OK" ] || [ "$STATUS" == "ERROR" ]; then
            echo "üéØ Quality Gate status: $STATUS"
            break
          fi
          
          echo "Waiting for quality gate... ($i/30)"
          sleep 5
        done
        
        if [ "$STATUS" != "OK" ]; then
          echo "‚ùå Quality Gate FAILED"
          echo "##vso[task.logissue type=warning]SonarQube Quality Gate failed. Check the dashboard for details."
          exit 1
        else
          echo "‚úÖ Quality Gate PASSED"
          echo "##vso[task.setvariable variable=QUALITY_GATE_STATUS]PASSED"
        fi
      env:
        SONARQUBE_URL: $(SONARQUBE_URL)
        SONAR_ADMIN_PASSWORD: $(SONAR_ADMIN_PASSWORD)
        projectKey: $(projectKey)
      displayName: 'Check Quality Gate'
